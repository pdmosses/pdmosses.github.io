[{"content":"","date":null,"permalink":"/tags/agda/","section":"Tags","summary":"","title":"Agda"},{"content":"","date":null,"permalink":"/tags/denotational-semantics/","section":"Tags","summary":"","title":"Denotational Semantics"},{"content":"This project (started in 2024) aims to make it straightforward to take an existing denotational semantics of a programming language, and use Agda to check its well-formedness, as well to prove properties of individual programs.\nThe Problem #A Scott–Strachey style denotational semantics1 is based on Scott-domains. It assumes that a domain is an appropriate kind of cpo, and defines domains (up to isomorphism) using various domain constructors, allowing mutual recursion. All functions on domains specified in λ-notation are Scott-continuous, and endofunctions have least fixed points.\nAgda does not assume that types are Scott-domains, nor that functions specified in λ-notation are continuous. Some Agda libraries have been developed to support Scott-domains; but when using them, a domain is represented as a pair of a type of elements and other data; and a continuous function is represented as a pair of a function and a proof of its continuity. These representations give rise to undesirable notational overhead and obfuscation when specifying elements of domains in λ-notation.\nAs a novice Agda user, I developed a lightweight workaround for this problem, reported in Towards Verification of a Denotational Semantics of Inheritance (2024) and Lightweight Agda Formalization of Denotational Semantics (2025).\nHowever, it would clearly be better to develop a more principled solution, based on an implementation of Synthetic Domain Theory (SDT) in Agda. The assistance of expert Agda users will surely be needed\u0026hellip;\nA Proposed Approach #The idea is to allow named types to be declared to be domains (or predomains). To avoid extending the syntax of Agda, it has been suggested to me that a universe Domain (hierarchy) could be added as built-in, although that would require extending the Agda compiler.\nWhen declared to be a domain, an Agda type is to have a partial order with a least element ⊥, closed (at least) under limits of monotone ascending ω-chains. All functions between domains are to be Scott-continuous, preserving the partial order and limits; the limit of the ascending Kleene chain of an endofunction on a domain is then its least fixed point.\nGroups of Agda types declared to be domains are to be definable (up to isomorphism) in terms of flat domains (lifted sets) and built-in domain constructors (including function domains, Cartesian products, sum domains, lifted domains). The type of all functions from an ordinary type to a domain may also be treated as a domain, implicitly ordered pointwise.\nRecursive references to domains are not to require guards, and type checking is to allow the isomorphisms between domains and their definitions to be left implicit when expressing elements of domains in λ-notation.\nExperiments #Some experiments with using a simplified version2 of the above approach can be browsed on web pages or PDFs at https://pdmosses.github.io/xds-agda/.\nThe experiments currently include denotational semantics of the untyped λ-calculus, PCF, and core Scheme.\nComments and suggestions for improvement are welcome! A denotational semantics of a programming language maps programs and their phrases directly to their denotations: immutable values \u0026ndash; typically higher-order functions. The denotation of a complete program represents its potential behaviour when executed. Denotations are compositional: the denotation of a phrase is defined inductively in terms of the denotations of its subphrases, independently of their form. The denotations of loops and recursive definitions involve fixed points of functions on denotations.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nFor simplicity, domains are defined to be unordered pointed sets, and endofunctions are required only to have well-defined fixed points. Postulates corresponding to the intended cpo structure of domains, and the continuity of functions between domains, are to be added.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":null,"permalink":"/software/ds-in-agda/","section":"Software Projects","summary":"","title":"Denotational Semantics in Agda"},{"content":"Professor Emeritus (Computer Science, Swansea University)\nVisitor (Programming Languages Group, Computer Science, TU Delft)\nCareer overview Education and Affiliations #I studied maths and computer science at Oxford, and completed my doctorate in 1975. After a postdoc at Oxford, I moved to Denmark, to a lectureship at Aarhus. I moved back to the UK in 2005, to a chair at Swansea. I retired and became emeritus in 2016, then moved to The Netherlands, where I am currently visiting TU Delft.\nSemantics #My research in semantics of programming languages stretches back to Christopher Strachey’s Programming Research Group at Oxford University in the early 1970s. During my graduate studies under Strachey\u0026rsquo;s supervision, I contributed to the development of denotational semantics, and implemented SIS, a system for generating programming language interpreters from denotational semantics.\nModularity #The main focus of my research since the 1980s has been on pragmatic aspects of semantic specifications – especially modularity. This led to the development of action semantics, MSOS (a modular variant of structural operational semantics) and CBS (component-based semantics). I was a principal investigator in the EPSRC-funded PLanCompS project (Programming Language Components and Specifications), which developed CBS.\nAlgebraic specification #In the 1980s and 1990s, I also participated in research on algebraic specification of data types and software. I was the initial coordinator of CoFI, the Common Framework Initiative, which designed the algebraic specification language CASL; and I was a chair of IFIP Working Group 1.3 (on Foundations of System Specification).\n","date":null,"permalink":"/","section":"Home","summary":"","title":"Home"},{"content":"","date":null,"permalink":"/tags/scott-domains/","section":"Tags","summary":"","title":"Scott-Domains"},{"content":"This section is about my involvement in current and previous software projects.\n","date":null,"permalink":"/software/","section":"Software Projects","summary":"","title":"Software Projects"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/code-navigation/","section":"Tags","summary":"","title":"Code Navigation"},{"content":"Hyperlinked twins of code repositories (developed since 2023) are websites that support precise name-based code navigation using ordinary web browsers. The hyperlinks and highlighting make it much easier to browse, explore, and understand code in unfamiliar repositories or languages.\nA paper about generation of hyperlinked twins was presented at SLE in October 2023:\nOnline Name-Based Navigation for Software Meta-languages\nThe sources of hyperlinked twin websites are generated by Spoofax from raw code on GitHub. The aim is for a future release of Spoofax to support generation of hyperlinked twins for code in all Spoofax meta-languages.\n","date":null,"permalink":"/software/hyperlinked-twins/","section":"Software Projects","summary":"","title":"Hyperlinked Twins"},{"content":"","date":null,"permalink":"/tags/spoofax/","section":"Tags","summary":"","title":"Spoofax"},{"content":"","date":null,"permalink":"/tags/websites/","section":"Tags","summary":"","title":"Websites"},{"content":"The CBS IDE (developed in 2017) is an integrated development environment for component-based semantics.\nThe current prototype is implemented in the Spoofax language workbench.\nSee the CBS IDE website.\n","date":null,"permalink":"/software/cbs-ide/","section":"Software Projects","summary":"","title":"CBS IDE"},{"content":"","date":null,"permalink":"/tags/component-based-semantics/","section":"Tags","summary":"","title":"Component-Based Semantics"},{"content":"","date":null,"permalink":"/tags/ide/","section":"Tags","summary":"","title":"IDE"},{"content":"","date":null,"permalink":"/tags/documentation/","section":"Tags","summary":"","title":"Documentation"},{"content":"","date":null,"permalink":"/tags/jekyll/","section":"Tags","summary":"","title":"Jekyll"},{"content":"Just the Docs (contributor since 2016, maintainer since 2020) is a theme for generating static websites with Jekyll. Source files for web pages can use Markdown, the Liquid templating language, and HTML.\nI have used Just the Docs for the CBS-beta and CBS IDE websites.\nSee the Just the Docs website.\n","date":null,"permalink":"/software/just-the-docs/","section":"Software Projects","summary":"","title":"Just the Docs"},{"content":"","date":null,"permalink":"/tags/modularity/","section":"Tags","summary":"","title":"Modularity"},{"content":"PLanCompS (Programming Language Components and Specifications, since 2011) is an open international collaboration, continuing from an EPSRC-funded research project (2011-16).\nThe main activity of PLanCompS is the development of the CBS framework, meta-language, and tool support, together with examples of language specification using CBS.\nSee the PLanCompS home page.\n","date":null,"permalink":"/research/plancomps/","section":"Research Projects","summary":"","title":"PLanCompS"},{"content":"This section is about my involvement in current and previous research projects.\n","date":null,"permalink":"/research/","section":"Research Projects","summary":"","title":"Research Projects"},{"content":"CBS (Component-Based Semantics, since 2004) is a framework and meta-language for component-based specification of programming languages. The main idea is to translate languages to so-called \u0026lsquo;funcons\u0026rsquo; (fundamental programming constructs). The behaviour of the funcons has already been specified, so translating a language to funcons determines the behaviour of all programs in that language.\nCBS was developed by the PLanCompS research project. From 2011 to 2016, the project was funded by EPSRC in the UK. PLanCompS is now an open international collaboration.\nThe CBS-beta website documents the current proposal for CBS.\n","date":null,"permalink":"/research/cbs/","section":"Research Projects","summary":"","title":"CBS"},{"content":"","date":null,"permalink":"/tags/dcgs/","section":"Tags","summary":"","title":"DCGs"},{"content":"","date":null,"permalink":"/tags/executable-semantics/","section":"Tags","summary":"","title":"Executable Semantics"},{"content":"The MSOS in Prolog project (2002–2004) illustrates how MSOS rules for the dynamic semantics of a simple imperative programming language can be written as Prolog clauses. The language and the rules are from a paper about MSOS (2004). The Prolog clauses correspond closely to the MSOS rules specified in the paper.\nRunning programs using the Prolog clauses tests whether the MSOS rules specify the expected behaviour.\n","date":null,"permalink":"/software/msos-in-prolog/","section":"Software Projects","summary":"","title":"MSOS in Prolog"},{"content":"","date":null,"permalink":"/tags/operational-semantics/","section":"Tags","summary":"","title":"Operational Semantics"},{"content":"","date":null,"permalink":"/tags/prolog/","section":"Tags","summary":"","title":"Prolog"},{"content":"The Action Environment (2001-2005) was a prototype tool that supported use of so-called constructive action semantics (a hybrid of action semantics and component-based semantics).\nIt was based on The Meta-Environment, and developed with Mark van den Brand (then at CWI, Amsterdam) and Jørgen Iversen (then at Aarhus).\nIt was never released – partly because action semantics was superseded by CBS, partly due to the work needed to update the implementation to a new release of The Meta-Environment.\n","date":null,"permalink":"/software/action-env/","section":"Software Projects","summary":"","title":"Action Environment"},{"content":"","date":null,"permalink":"/tags/action-semantics/","section":"Tags","summary":"","title":"Action Semantics"},{"content":"","date":null,"permalink":"/tags/asf+sdf/","section":"Tags","summary":"","title":"ASF+SDF"},{"content":"","date":null,"permalink":"/tags/meta-environment/","section":"Tags","summary":"","title":"Meta-Environment"},{"content":"The Prolog MSOS Tool (2001–2004) was used to support undergraduate lectures on Fundamental Concepts and Formal Semantics of Programming Languages.\nSee the lecture notes for explanations and exercises.\n","date":null,"permalink":"/software/prolog-msos-tool/","section":"Software Projects","summary":"","title":"Prolog MSOS Tool"},{"content":"","date":null,"permalink":"/tags/teaching/","section":"Tags","summary":"","title":"Teaching"},{"content":"","date":null,"permalink":"/tags/maude/","section":"Tags","summary":"","title":"Maude"},{"content":"MAT (1998–2001) was a prototype tool for action semantics and MSOS, based on Maude. It was developed with Christiano Braga and Hermann Hauesler (PUC, Rio de Janeiro, Brazil) and José Meseguer (SRI International, USA).\nMAT was superseded by MMT, the Maude MSOS Tool.\n","date":null,"permalink":"/software/mat/","section":"Software Projects","summary":"","title":"Maude Action Tool"},{"content":"","date":null,"permalink":"/tags/msos/","section":"Tags","summary":"","title":"MSOS"},{"content":"","date":null,"permalink":"/tags/i-msos/","section":"Tags","summary":"","title":"I-MSOS"},{"content":"","date":null,"permalink":"/tags/labeled-transitions/","section":"Tags","summary":"","title":"Labeled Transitions"},{"content":"MSOS (Modular SOS, 1999–2016) is modular variant of SOS (structural operational semantics).\nAn MSOS is a labelled transition system where states are simply terms (including computed values), and labels incorporate all auxiliary entities (e.g., environments, stores, signals), which can be referenced independently. Computations require labels on adjacent transitions to be composable.\nSee the MSOS in Prolog project for how to run programs using MSOS rules specified in Prolog. The Prolog MSOS Tool was used in undergraduate courses on formal semantics at Aarhus (2001–2004).\nFrom the first publication about MSOS:\nModular SOS is a form of SOS that ensures a high degree of modularity: the transition rules for each construct are completely independent of the presence or absence of other constructs in the described language. When one extends or changes the described language, the description can be extended or changed accordingly, without reformulation – even though new kinds of information processing may be required.\nThis is in marked contrast to conventional SOS, where modularity tends to be quite poor: when extending a pure functional language with concurrency primitives and/or references, for instance, the original specification of the transition rules has to be completely reformulated.\nIn denotational semantics, the problem of obtaining good modularity has received much attention, and has to a large extent been solved by introducing so-called monad transformers. Modular SOS provides an analogous solution for operational semantics.\nThe basic idea of Modular SOS is to incorporate all semantic entities as components of labels. Thus configurations are restricted to syntax and computed values. The foundations of Modular SOS involve a novel form of labelled transition system (LTS), where the labels are the arrows of a category.\nIn contrast to other frameworks where labels are equipped with categorical structure (e.g. Tile Logic and Rewriting Logic), composition here is generally a partial operation, and computations are restricted to those where all adjacent labels are composable. Note that the labels are no longer the simple atomic actions often used in studies of process algebra, but here usually have entities such as environments and stores as components; so do the objects of the label category, which correspond to the states of the processed information.\nThree fundamental label transformers have been identified; they preserve the computations specified by a modular SOS, and their order of application is irrelevant. The label transformers are analogous to some simple monad transformers.\nThe one which transforms the label category to incorporate new context information (such as the current environment) adds the same sort of component both to arrows and to objects, and composition preserves the value of that component. Also the transformer which incorporates mutable information (such as the current store) adds a corresponding component to each object, whereas it extends each arrow with a pair of such components; composition on pairs is as for binary relations. Finally, the transformer which incorporates emitted information (such as synchronization signals) adds a corresponding component to each arrow, but leaves the objects essentially unchanged. \u0026mdash; Foundations of Modular SOS (preprint)\nMSOS allows the semantics of individual programming constructs to be specified independently, which is of crucial importance for the PLanCompS project.\nI-MSOS #I-MSOS (Implicitly-Modular SOS) allows the use of conventional SOS notation in MSOS: specifications use explicit labels only for emitted information, and the label components for any contextual and mutable information are left implicit.\nIn contrast to a transition system specification in process algebra, a structural operational semantics (SOS) of a programming language usually involves auxiliary entities: stores, environments, etc. When specifying SOS rules, particular auxiliary entities often need to be propagated unchanged between premises and conclusions. The standard technique is to make such propagation explicit, using variables. However, referring to all entities that need to be propagated unchanged in each rule can be tedious, and it hinders direct reuse of rules in different language descriptions.\nThis paper proposes a new interpretation of SOS rules, such that each auxiliary entity is implicitly propagated in all rules in which it is not mentioned. The main benefits include significant notational simplification of SOS rules and much-improved reusability. \u0026gt; This new interpretation of SOS rules is based on the same foundations as Modular SOS, but avoids the notational overhead of grouping auxiliary entities together in labels.\nAfter motivating and explaining implicit propagation, the paper considers the foundations of SOS and Modular SOS specifications, and defines the meaning of SOS specifications with implicit propagation by translating them to Modular SOS. It then shows how implicit propagation can simplify various rules found in the SOS literature.\n\u0026mdash; Implicit Propagation in Structural Operational Semantics\nThe CBS meta-notation for component-based semantics incorporates an combination of I-MSOS and term rewriting.\n","date":null,"permalink":"/research/msos/","section":"Research Projects","summary":"","title":"MSOS"},{"content":"","date":null,"permalink":"/tags/sos/","section":"Tags","summary":"","title":"SOS"},{"content":"The ASD Tools (1992–1996) supported the original version of action semantics.\nThey were based on the ASF+SDF Meta-Environment, and developed with Arie van Deursen (then at CWI, Amsterdam).\n","date":null,"permalink":"/software/asd-tools/","section":"Software Projects","summary":"","title":"ASD Tools"},{"content":"","date":null,"permalink":"/tags/algebraic-specification/","section":"Tags","summary":"","title":"Algebraic Specification"},{"content":"CoFI (Common Framework Initiative, 1995–2005) was a collaborative project to develop a common framework for algebraic specification and development of software.\nOne of the main outcomes of CoFI is CASL (Common Algebraic Specification Language). CASL, together with its sub-languages and extensions, provides succinct notation for the various concepts and constructs of previous algebraic specification languages. Its main features are as follows:\nCASL is based on a critical selection of known constructs. It is an expressive, simple, pragmatic language. It is suitable for specifying requirements and design for conventional software packages It has restrictions to various sublanguages. It has extensions to higher-order, state-based, concurrent, and other languages. Use of CASL is supported by tools. IFIP WG 1.3 supported CoFI, and members of WG 1.3 reviewed the design and definition of CASL.\nThe CASL Reference Manual and a CASL User Manual are published by Springer, and available in PDF from the CoFI website (CASL-RM, CASL-UM).\nHets (the heterogeneous tool set) supports use of CASL and its extensions in various automated and interactive theorem provers.\nSee also the Wikipedia page about CASL.\n","date":null,"permalink":"/research/cofi/","section":"Research Projects","summary":"","title":"CoFI"},{"content":"The Unified Algebras framework (1988–1992) allows algebraic speciﬁcation of sorts as values. It was used as the meta-notation for specifying action semantics.\nA unified algebra is a kind of total homogeneous algebra, i.e., a set equipped with some total functions. Particular unified algebras represent data types; classes of unified algebras represent abstract data types. This paper establishes an institution, i.e., a logical specification framework, for specifying abstract data types as classes of unified algebras.\nThe carrier of a unified algebra is a distributive lattice with a bottom. The functions of the algebra always include the join and meet of the lattice, and a constant denoting the bottom of the lattice. All functions are required to be monotone with respect to the partial order of the lattice.\nThe main idea is that the values in the carrier of a unified algebra represent not only elements of data, but also classifications of elements into sorts. For instance, a unified algebra representing a data type of numbers and lists would have values not only for particular numbers and particular lists, but also for the sort of all numbers and the sort of all lists.\nThe lattice partial order of the carrier represents sort inclusion; the join and meet operations represent sort union and intersection. The bottom of the lattice represents the empty sort. The empty sort, shunned in conventional algebraic frameworks, provides a particularly natural way of representing the lack of result of partial operations – avoiding the need to introduce special \u0026ldquo;error\u0026rdquo; elements. Operations need not preserve the empty sort.\n\u0026mdash; Unified Algebras and Institutions, §1\n","date":null,"permalink":"/research/unified-algebras/","section":"Research Projects","summary":"","title":"Unified Algebras"},{"content":"","date":null,"permalink":"/tags/action-notation/","section":"Tags","summary":"","title":"Action Notation"},{"content":"Action Semantics (1985–2005) is a hybrid of denotational and operational semantics, developed in collaboration with David Watt (Glasgow).\nAn action semantics of a programming language maps syntax compositionally to action notation, and the semantics of action notation is defined using SOS (structural operational semantics).\nSee the Wikipedia page and the Action Semantics book.\nThe non-modularity of the original SOS of action notation prompted the development of MSOS (a modular variant of SOS using labeled transitions) and I-MSOS (a version of MSOS using conventional SOS notation).\n","date":null,"permalink":"/research/action-semantics/","section":"Research Projects","summary":"","title":"Action Semantics"},{"content":"","date":null,"permalink":"/tags/extensibility/","section":"Tags","summary":"","title":"Extensibility"},{"content":"","date":null,"permalink":"/tags/bcpl/","section":"Tags","summary":"","title":"BCPL"},{"content":"","date":null,"permalink":"/tags/call-by-need/","section":"Tags","summary":"","title":"Call by Need"},{"content":"","date":null,"permalink":"/tags/lambda-interpreter/","section":"Tags","summary":"","title":"Lambda Interpreter"},{"content":"","date":null,"permalink":"/tags/partial-evaluation/","section":"Tags","summary":"","title":"Partial Evaluation"},{"content":"SIS (semantics implementation system, 1972–1979) used partial evaluation to run programs according to their denotational semantics.\nIt included an SLR(1) parser generator, a call-by-need lambda-notation interpreter, and a translator from denotational semantics specifications to lambda-expressions.\nSIS was written in BCPL at Oxford (1972\u0026ndash;1976) and Aarhus (1976\u0026ndash;1979), and ported to several operating systems, including MULTICS at MIT.\nMy initial aim was to use SIS for generating correct-by-construction interpreters and compilers for programming languages from their denotational semantics. However, that turned out to be over-ambitious, and the main application of SIS was as tool support for teaching denotational semantics (personally at Aarhus, and by colleagues at universities in some other countries).\nMoreover, attempts to develop denotational semantics for larger programming languages in SIS clearly exposed a significant lack of modularity in the meta-notation. This led to the development of the action semantics framework, which uses a combination of denotational and operational semantics.\nMy dissertation (1975) describes an early version of SIS. The SIS Reference Manual and Tested Examples document the final version (1979).\nThe SIS code for a denotational semantics of the ASPLE mini-language, by Veronique Donzeau-Gouge, Bernard Lang, and Gilles Kahn, was published as an IRIA research report (1978), and used in the successful bid for the DoD contract to develop the Ada language.\nExperimentation with using SIS for compiler generation was reported in a SIGPLAN article by James Bodwin, Laurette Bradley, Kohji Kanda, Diane Litle, and Uwe Pleban (1982). Peter Lee and Uwe Pleban subsequently developed a realistic compiler generator, published at POPL (1987). It is based on high-level semantics, which is related to action semantics.\n","date":null,"permalink":"/software/sis/","section":"Software Projects","summary":"","title":"SIS"},{"content":"","date":null,"permalink":"/tags/sis/","section":"Tags","summary":"","title":"SIS"},{"content":"Executable component-based semantics #L. Thomas van Binsbergen, Peter D. Mosses, and Neil Sculthorpe\nPublication (2019): J. Log. Algebr. Meth. Program. 103, pp. 184–212, doi:10.1016/j.jlamp.2018.12.004\nPreprint (2018): PDF\n","date":null,"permalink":"/papers/binsbergen2019ecbs/","section":"Papers","summary":"","title":""},{"content":"Modular structural operational semantics #Peter D. Mosses\nPublication (2004): J. Log. Algebr. Program. 60-61, pp. 195–228, doi:10.1016/j.jlap.2004.03.008\nPreprint (2003): PDF\nRelated projects:\nMSOS in Prolog: Prolog rules corresponding to the MSOS rules in this paper.\nProlog MSOS Tool: Generation of Prolog interpreters from MSDF (a meta-language for specifying MSOS of programming languages), including lecture notes.\nCBS: A framework for component-based specification of programming languages using MSOS.\n","date":null,"permalink":"/papers/mosses2004msos/","section":"Papers","summary":"","title":""},{"content":"Affilations with academic organisations (in reverse order of starting date).\nProgramming Languages Group, TU Delft\nvisitor since 2016 Computer Science Department, Swansea University\nprofessor 2005–2015, emeritus since 2016 IFIP WG 2.11 (Working Group on Program Generation)\nmember since 2013 IFIP WG 1.3 (Working Group on Foundations of System Speciﬁcation)\nmember 1994–2015, chair 1998–2003, emeritus member since 2015 IFIP WG 2.2 (Working Group on Formal Description of Programming Concepts)\nmember since 1984, emeritus member since 2023 Previous affiliations # IT Center, UFPE, Recife\nvisiting researcher 2000 Faculty of Mathematics, Informatics and Mechanics, University of Warsaw\nvisiting researcher 1999 SRI International, Menlo Park\nvisiting researcher 1998–99 CoFI (Common Framework Initiative for algebraic speciﬁcation and development)\nsteering committee member 1995–2005, coordinator 1995–98 BRICS Reserch Centre, Aarhus University\nkernel researcher 1993–2004 School of Informatics, University of Edinburgh\nsenior research fellow 1983 Department of Computer Science, Aarhus University\nvisiting lecturer 1976–78, associate professor 1978–2004, head 1995–98 Wolfson College, Oxford University\njunior research fellow 1975–76 Programming Research Group, Oxford University\npostdoc 1975–76 Education # Wolfson College, Oxford University\ngraduate student 1971–75 Programming Research Group, Oxford University\nMSc 1970–71, DPhil 1971–75 Trinity College, Oxford University\nBA 1967–70, MSc 1970–71 ","date":null,"permalink":"/affiliations/","section":"Home","summary":"","title":"Affiliations"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"This section lists my involvement in scientific meetings since 2005.\n2025 #Future # OlivierFest 2025: This workshop celebrates the career and accomplishments of Olivier Danvy. Singapore, 14–15 October 2025 (PC member; paper: Compositional Semantics for eval in Scheme) Past # IFIP WG 1.3: Working Group Meeting on Foundations of System Specification, Glasgow, Scotland, 13–15 June 2025 (emeritus member) TYPES 2025: 31st International Conference on Types for Proofs and Programs, Glasgow, Scotland, 9–13 June 2025 (handout: Lightweight Agda Formalization of Denotational Semantics, recording) 2024 # IFIP WG 2.11: Working Group Meeting on Program Generation, Edinburgh, Scotland, 3–6 December 2024 (Member) SLE \u0026lsquo;24: 17th ACM SIGPLAN International Conference on Software Language Engineering, Pasadena, California, USA, 20–21 October 2024 (PC co-chair) JENSFEST 2024: This workshop celebrates the career and accomplishments of Jens Palsberg on the occasion of his 60th birthday. Pasadena, California, USA, 22 October 2024 (presentation: Towards Verification of a Denotational Semantics of Inheritance, recording) First Wolves Reunion: 50 Years on the Cherwell, Wolfson College, University of Oxford, 6–7 September 2024 (DPhil student 1971–75, Junior Research Fellow 1975–76) ETAPS 2024: European Joint Conferences on Theory and Practice of Software, Luxembourg City, Luxembourg, 6–11 April 2024 2023 # LangDev 2023: Language Developer’s Meetup, Utrecht, Netherlands, 14–15 November 2023 SLE \u0026lsquo;23: 16th ACM SIGPLAN International Conference on Software Language Engineering, Cascais, Lisbon, Portugal, 23–24 October 2023 (demonstration: Online name-based navigation for software meta-languages) 5225: Anniversary celebration: 52 and 25 years, Aarhus University, Denmark, 26 May 2023 (visiting lecturer 1976–78, associate professor 1978–2004, head 1995–98) Modular Semantics Seminar, University of Amsterdam, Amsterdam, 22 August 2023 (presentation: Languages for defining funcons – discussion) EVCS 2023: Eelco Visser Commemorative Symposium, 5 April 2023, Delft, The Netherlands (Organising chair, and presentation: Using Spoofax to Support Online Code Navigation) IFIP WG 2.11: Working Group Meeting on Program Generation, Delft, Netherlands, 3–4 April 2023 (Member, local organiser) 2022 # IFIP WG 2.11: Working Group Meeting on Program Generation, Odense, Denmark, 15–18 August 2022 (Member, presentation: Using Spoofax to Support Online Code Navigation) Modular Semantics Meet-Up, CWI, Amsterdam, 9 June 2022 (presentation: On the design of funcons) 2021 # ISoLA 2021: International Symposium On Leveraging Applications of Formal Methods, Verification and Validation, Rhodes, Greece, 17–29 October 2021 (presentation: Fundamental concepts in programming languages, preprint) 2020 # BCTCS 2020: 36th British Colloquium for Theoretical Computer Science, Swansea, UK, online, 6-8 April 2020 (presentation: Towards Semantics Online, PDF) IFIP WG 2.11: Working Group Meeting on Program Generation, Paris, France, 17–20 February 2020 (Member) 2019 # PLNL 2019: Second Workshop on Programming Languages in The Netherlands, Radboud University Nijmegen, 12 December 2019 Colloquium at Groningen: CBS, Component-based specification of programming languages, 13 November 2019 GPCE 2019: 18th International Conference on Generative Programming: Concepts \u0026amp; Experiences, Athens, Greece, 21–22 October 2019 (PC member) HFM 2019: History of Formal Methods Workshop, Porto, Portugal, 11 October 2019 (PC member) F-IDE 2019: 5th Workshop on Formal Integrated Development Environments, Porto, Portugal, 7 October 2019 (presentation: A component-based formal language workbench, preprint) SBLP 2019: XXIII Brazilian Symposium on Programming Languages, Universidade Federal da Bahia – UFBA, Salvador, Brazil, 23–27 September 2019 (PC member) PSI'19: 12th A.P. Ershov Informatics Conference, Akademgorodok, Novosibirsk, Russia, 2–5 July 2019 (PC member) FSEN 2019: 8th IPM International Conference on Fundamentals of Software Engineering, Tehran, Iran, 1–3 May 2019 (PC member) LangDev'19: an informal meeting on language development using language workbenches, Amsterdam, The Netherlands, 21–22 March 2019 (presentation: Reuse and co-evolution in CBS language specifications, slides PDF) Lovelace lecture 2019 by Gordon Plotkin: Languages for learning, London, UK, 4 March 2019 2018 # Seminar by Mohammad Mousavi: Conformance Testing as a Tool for Designing Connected Vehicle Functions, Delft, The Netherlands, 13 December (visit host) BENEVOL 2018: The 17th Belgium-Netherlands Software Evolution Workshop, Delft, The Netherlands, 10–11 December 2018 Doctoral defence of Pablo Inostroza Valdera, University of Amsterdam, The Netherlands, 29 November 2018 (committee member) PLNL 2018: First VERSEN Workshop on Programming Languages in The Netherlands, 22 November 2018, Utrecht, The Netherlands SBLP 2018: XXII Brazilian Symposium on Programming Languages, University of São Paulo (ICMC/USP), São Carlos/SP, Brazil, 20–21 September 2018 (PC member) IFIP WG 2.2: Working Group Meeting on Formal Description of Programming Concepts, Brno, Czech Republic, 17–19 September 2018 (Member) Modeling for Sustainability, Dagstuhl, Germany, 26–31 August 2018 IFIP WG 2.11: Working Group Meeting on Program Generation, Kyoto, Japan, 4–7 June 2018 (Member, presentation: The CBS Framework, slides PDF) CoCoDo 2018: Compiler Coding Dojo, Nice, France, 9 April 2018 (Presentation: FunCons) LangDev Meet-Up 2018 @ CWI, Amsterdam, The Netherlands, 8–9 March 2018 (Presentation: Funcons: reusable components of language specifications, slides PDF) 2017 # SLE 2017: 10th ACM SIGPLAN International Conference on Software Language Engineering, Vancouver, Canada, 23–24 October 2017 (Keynote: Engineering meta-languages for specifying software languages, YouTube video) IFIP WG 2.2: Working Group Meeting on Formal Description of Programming Concepts, Bordeaux, France, 18–20 September 2017 (Member) SLEBoK: The Software Language Engineering Body of Knowledge, Dagstuhl, Germany, 20–25 August 2017 PSI'17: 11th A.P. Ershov Informatics Conference, Moscow, Russia, 26–29 June 2017 (PC member) FSEN 2017: 7th IPM International Conference on Fundamentals of Software Engineering, Tehran, Iran, 26–28 April 2017 (PC member) Sannellabration: Workshop in Celebration of Don Sannella\u0026rsquo;s 60th Birthday, Uppsala, Sweden, 23 April 2017 (Invited talk: CoFI with Don, paper: CoFI with Don Sannella) 2016 # Strachey100: Centenary conference celbrating the life and work of Christopher Strachey, Oxford, UK, 19 November 2016 (Invited talk: SIS, a semantics implementation system – video on iTunes U) SPLASH 2016: ACM SIGPLAN conference on Systems, Programming, Languages and Applications: Software for Humanity, Amsterdam, The Netherlands, 30 October – 4 November 2016 (attending GPCE, SLE) GDP70: Symposium in honour of Gordon Plotkin\u0026rsquo;s 70th birthday, Edinburgh, Scotland, 9 September 2016 (Contributed talk PDF: Modular SOS for control operators) Research visit: Programming Languages Group, TU Delft, The Netherlands, September 2016 – August 2019 Modularity'16: 15th International Conference on Modularity, Málaga, Spain, 14–17 March 2016 (Research Results Track PC member; Demonstration Track paper: Tool support for component-based semantics, with Thomas van Binsbergen and Neil Sculthorpe) Research visit: Programming Languages Group, TU Delft, The Netherlands, April–June 2016 2015 # Habilitation defence of Benoit Combemale, University of Rennes I, France, 4 December 2015 (jury member) IFIP WG 2.11: Working Group Meeting on Program Generation, London, UK, 9–12 November 2015 (member) NWPT 2015: 27th Nordic Workshop on Programming Theory, Reykjavik, Iceland, 21–23 October 2015 (abstracts: Tool support for component-based semantics, with Thomas van Binsbergen and Neil Sculthorpe; and Using typings as types, with Casper Bach Poulsen and Neil Sculthorpe) LRC: Logic, Rewriting, and Concurrency – Festschrift Symposium in Honor of José Meseguer, Urbana, Illinois, USA, 23–25 September 2015 (paper: Weak bisimulation as a congruence in MSOS, with Ferdinand Vesely) SBLP 2015: XIX Brazilian Symposium on Programming Languages, Belo Horizonte, Brazil, 21–26 September 2015 (PC member) PSI'15: Ershov Informatics Conference, Innopolis, Kazan, Russia, 25–27 August 2015 (PC member) DiverSE’s Seminar: Software Language Engineering, Rennes, France, 28 May 2015 (keynote speaker) FSEN 2015: Fundamentals of Software Engineering, Tehran, Iran, 22–24 April 2015 (PC member) WoC'15: Workshop on Continuations, Satellite event of ETAPS 2015, London, UK, 12 April 2015 (paper: A modular structural operational semantics for delimited continuations, with Neil Sculthorpe and Paolo Torrini) Modularity'15: 14th International Conference on Modularity, Fort Collins, Colorado, USA, 16–19 March 2015 (keynote: A component-based approach to semantics) Domain-Specific Languages: Seminar, Dagstuhl, Germany, 1–6 February 2015 PEPM 2015: ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation, Mumbai, India, 13–14 January 2015 (paper: Imperative polymorphism by store-based types as abstract interpretations, with Casper Bach Poulsen and Paolo Torrini) 2014 # Peter Landin Semantics Seminar 2014: On correspondences between programming languages and semantic notations, BCS-FACS, London, UK, 8 December 2014 (presentation) Doctoral defence of Arjan P. van der Meer, Eindhoven University of Technology, The Netherlands, 10 November 2014 (committee member) NWPT 2014: 26th Nordic Workshop on Programming Theory, 29-31 October 2014, Halmstad University, Sweden (abstract: Divergence as state in co-inductive big-step semantics, with Casper Bach Poulsen) Seminar: A component-based approach to programming language semantics, Newcastle, UK, 28 October 2014 Doctoral defence of Ken Madlener, Radboud University, Nijmegen, The Netherlands, 9 October 2014 (committee member) SBLP 2014: XVIII Brazilian Symposium on Programming Languages, Maceio, Brazil, approx 28 September–3 October 2014 (PC member) IFIP WG 2.2: Working Group Meeting on Formal Description of Programming Concepts, Munich, Germany, 15–18 September 2014 (member) Luca Cardelli Fest: an event in honour of Luca Cardelli, Microsoft Research Cambridge, UK, 8–9 September 2014 SLE 2014: 7th International Conference on Software Language Engineering, Västerås, Sweden, 14–15 September 2014 (PC member) PSI'14: Ershov Informatics Conference, St. Petersburg, Russia, 24–27 June 2014 (PC member) Modularity'14: 13th International Conference on Modularity, Lugano, Switzerland, 22–25 April 2014 (paper: Reusable Components of Semantic Specifications, with Martin Churchill and Paolo Torrini) ESOP'14: 23rd European Symposium on Programming, Grenoble, France, 7–11 April 2014 (paper: Deriving Pretty-Big-Step Semantics from Small-Step Semantics, with Casper Bach Poulsen) WRLA'14: 10th International Workshop on Rewriting Logic and Its Applications, 5–6 April 2014, Grenoble, France (paper: FunKons: Component-Based Semantics in K, with Ferdinand Vesely) 2013 # PLanCompS: Project Meeting, Royal Holloway, UK, 16–17 December 2013 SBLP 2013: XVII Brazilian Symposium on Programming Languages, Brasilia, Brazil, 29 September–4 October 2013 (PC member) IFIP WG 2.2: Working Group Meeting on Formal Description of Programming Concepts, Lisbon, Portugal, 23–26 September 2013 (member) PPDP 2013: 15th International Symposium on Principles and Practice of Declarative Programming, Madrid, Spain, 16–18 September 2013 LOPSTR 2013: 23rd International Symposium on Logic-Based Program Synthesis and Transformation, Madrid, Spain, 16–18 September 2013 (paper: Generating Specialized Interpreters for Modular Structural Operational Semantics, with Casper Bach Poulsen) CONCUR 2013: 24th International Conference on Concurrency Theory, Buenos Aires, Argentina, 27–30 August 2013 (paper: Modular Semantics for Transition System Specifications with Negative Premises, with Martin Churchill and Mohammad Reza Mousavi) SLS 2013: Workshop on Scalable Language Specification, Cambridge, UK, 25–27 June 2013 (co-organiser, PLanCompS presentation, coauthor) University of Illinois at Urbana-Champaign, USA, 7–9 Jun 2013 (PLanCompScollaboration) IFIP WG 2.11: Working Group Meeting on Program Generation, Minneapolis, USA, 3–7 June 2013 (member) FSEN 2013: Fundamentals of Software Engineering, Tehran, Iran, 24-26 April 2013 (PC member) CPHC 2013: Annual Conference, Cardiff, Wales, 25–26 March 2013 FoSSaCS 2013: 16th International Conference on Foundations of Software Science and Computation Structures, Rome, Italy, 18–20 March 2013 (paper: Modular Bisimulation Theory for Computations and Values, with Martin Churchill) IFIP WG 1.3: Working Group Meeting on Foundations of System Specification, Rome, Italy, 16 March 2013 (member) 2012 # Research colloquium, Software Engineering Research Group, Delft University of Technology, The Netherlands, 13 Dec 2012 Doctoral defence of Luc Engelen, Eindhoven University of Technology, The Netherlands, 11 Dec 2012 (committee member) SLE 2012: 5th International Conference on Software Language Engineering, Dresden, Germany, 25–28 Sep 2012 (PC member) IFIP WG 2.2: Working Group Meeting on Formal Description of Programming Concepts, Amsterdam, The Netherlands, 24–26 September 2012 (member, presentation) SBLP 2012: XVI Brazilian Symposium on Programming Languages, São Paulo, Brazil, 23–28 Sep 2012 (PC member) SSLF12: Summer School on Language Frameworks, Sinaia, Romania, 23–31 Jul 2012 (PLanCompS presentation) IFIP WG 2.11: Working Group Meeting on Program Generation, Halmstad, Sweden, 25–27 Jun 2012 (observer, presentation) Eindhoven University of Technology, The Netherlands, 15 Jun 2012 (PLanCompScollaboration) CWI Lectures on Understanding Software, CWI, Amsterdam, The Netherlands, 14 Jun 2012 MFPS 2012: 28th Conference on the Mathematical Foundations of Programming Semantics, University of Bath, UK, 6–9 Jun 2012 14th Wessex Theory Seminar, University of Bath, UK, 23 May 2012 PLanCompS: Project Meeting, Royal Holloway, UK, 19–20 Apr 2012 Robin Milner Sympoisum, Edinburgh, UK, 15–18 Apr 2012 Algebraic and Logical Methods for Data and Modelling, Gower, UK, 12 Apr 2012 Microsoft Research Cambridge, UK, 17 Jan 2012 (PLanCompS discussions) Ott group, Cambridge University, UK, 16 Jan 2012 (PLanCompS discussions) 2011 # Mathematics and Computer Science Colloquium, Eindhoven University of Technology, The Netherlands, 15 Dec 2011 (PLanCompS presentation) PEM seminar, Software Analysis and Transformation, CWI, Amsterdam, The Netherlands, 14 Dec 2011 (PLanCompS presentation) Doctoral defence of Lennart Kats, Delft University of Technology, The Netherlands, 13 Dec 2011 (committee member) Symposium on Software Language Design and Engineering, Delft University of Technology, The Netherlands, 13 Dec 2011 (PLanCompS presentation) SBLP 2011: XV Brazilian Symposium on Programming Languages, São Paulo, Brazil, 26–30 September 2011 (PC member) IFIP WG 2.2: Working Group Meeting on Formal Description of Programming Concepts, Paris, France, 21–23 September 2011 (member) PLanCompS: Project Kick-Off Meeting, Swansea, UK, 16–18 September 2011 DSL 2011: Conference on Domain-Specific Languages, Bordeaux, France, 6–8 September 2011 IFIP WG 2.11: Working Group Meeting on Program Generation, Bordeaux, France, 3–5 September 2011 (observer, PLanCompS presentation) K Workshop 2011: 2nd International Workshop, Cheile Gradistei, Romania, 8–12 August 2011 (PC member) SLE 2011: 4th International Conference on Software Language Engineering, Braga, Portugal, 3–6 July 2011 (PC member) PSI'11: Ershov Informatics Conference (PSI Conference Series, 8th edition), Novosibirsk, Russia, 27 June – 1 July 2011 (PC member) FSEN 2011: Fundamentals of Software Engineering, Tehran, Iran, 20-22 April 2011 (PC member) LDTA 2011: *11th Workshop on Language Descriptions, Tools and Applications,*Saarbrücken, Germany, 26–27 March 2011 (tool challenge presentation) Inaugural lecture: The Language of Mechanism, Royal Holloway, University of London, UK, 10 March 2011 2010 # Peter Landin Annual Semantics Seminar, London, UK, 6 December 2010 Mathematical Foundations Seminar, University of Bath, UK, 25 November 2010 (presentation: Fundamental Programming Constructs (Funcons)) 9th Wessex Theory Seminar, Imperial College London, UK, 4 November 2010 (presentation: On Bisimulation and Modularity) Computer Science Seminar, University of Leicester, UK, 15 October 2010 (presentation:Modular Specification of Programming Languages: Advances and Challenges) SLE 2010: 3rd International Conference on Software Language Engineering, Eindhoven, The Netherlands, 12–13 October 2010 (PC member) GPCE'10: 9th International Conference on Generative Programming and Component Engineering, Eindhoven, The Netherlands, 10–12 October 2010 SBLP 2010: XIV Brazilian Symposium on Programming Languages, Salvador da Bahia, Brazil, 27 September – 1 October 2010 (PC member) CBSoft 2010: Brazilian Conference on Software: Theory and Practice, Salvador da Bahia, Brazil, 27 September – 1 October 2010 (Tutorials PC member) IFIP WG 2.2: Working Group Meeting on Formal Description of Programming Concepts, Warsaw, Poland, 20–22 September 2010 (member) EXPRESS'10: 17th International Workshop on Expressiveness in Concurrency, Paris, France, 30 August 2010 (paper: Robustness of Equations Under Operational Extensions) 8th Wessex Theory Seminar, Bath, UK, 13 July 2010 IFIP WG 1.3: Working Group Meeting on Foundations of System Specification, Bremen, Germany, 4–6 July 2010 (member) AMAST 2010: 13th International Conference on Algebraic Methodology and Software Technology, Québec, Canada, 23–26 June 2010 (PC member) ACM-BCS Visions 2010: International Conference, CPHC Conference, and UKCRC Grand Challenges, Edinburgh, UK, 13–26 April 2010 LDTA 2010: 10th Workshop on Language Descriptions, Tools and Applications, Paphos, Cyprus, 27–28 March 2010 (PC member) 2009 # Seminar on Component-Based Semantics, Instituto de Computação, Universidade Federal Fluminense, Brazil, 10 December 2009 ICFEM 2009: 11th International Conference on Formal Engineering Methods, Rio de Janeiro, Brazil, 8–11 December 2009 (session chair) FM+AM'09: Intl. Workshop on Formal Methods and Agile Methods, Rio de Janeiro, Brazil, 8 December 2009 (paper: An Agile Approach to Language Modelling and Development) Symposium for Mogens Nielsen\u0026rsquo;s 60th Birthday, Aarhus, Denmark, 3–4 October 2009 (invited talk: On Bisimulation and Modularity) IFIP WG 1.3 Meeting, Udine, Italy, 11–12 September 2009 Symposium, Udine, Italy, 10 September 2009 (Festschrift: Semantics and Algebraic Specification, edited by Jens Palsberg) CALCO 2009: 3rd Conference on Algebra and Coalgebra in Computer Science, Udine, Italy, 6–10 September 2009 (SC member) SAVCBS 2009: 8th Workshop on Specification and Verification of Component-Based Systems, Amsterdam, The Netherlands, 25 August 2009 (paper: Component-Based Semantics) SBLP 2009: XIII Brazilian Symposium on Programming Languages, Gramado-RS, Brazil, 19–21 August 2009 (PC member) PSI'09: 7th International Andrei Ershov Memorial Conference on Perspectives of System Informatics, Novosibirsk, Russia, 15–19 June 2009 (PC member) FSEN'09: 3rd International Conference on Fundamentals of Software Engineering, Kish Island, Iran, 15–17 April 2009 (PC member) MFPS 2009: 25th Conference on the Mathematical Foundations of Programming Semantics, Oxford, UK, 3–7 April 2009 LDTA 2009: 9th Workshop on Language Descriptions, Tools and Applications, York, UK, 25–26 March 2009 2008 # BCS 2008: Visions of Computer Science, London, UK, 22–24 September 2008 (paper: Component-Based Description of Programming Languages) 2nd Wessex Theory Seminar, Bath, UK, 17 September 2008 (presentation: Implicit Propagation in SOS) SBLP 2008: XII Brazilian Symposium on Programming Languages, Fortaleza, Brazil, 27–29 August 2008 (Co-chair and seminar on Advances and Challenges in Modular Semantics) ICTAC 2008: 5th International Colloquium on Theoretical Aspects of Computing, Istanbul, Turkey, 1–3 September 2008 (PC member) LSFA'08: Third Workshop on Logical and Semantic Frameworks, with Applications, Salvador de Bahia, Brazil, 26 August 2008 (PC member) AMAST 2008: 12th International Conference on Algebraic Methodology and Software Technology, Urbana, USA, 28–31 July 2008 (PC member) SOS 2008: 5th Structural Operational Semantics Workshop, Reykjavik, Iceland, 6 July 2008 (paper: Implicit Propagation in Structural Operational Semantics) WADT 2008: 19th International Workshop on Algebraic Development Techniques, Pisa, Italy, 13–16 June 2008 (SC and PC member) Colloquium in Honour of Ugo Montanari, Pisa, Italy, 12 June 2008 LDTA 2008: Eighth Workshop on Language Descriptions, Tools and Applications, Budapest, Hungary, 5 April 2008 (PC member) 2007 # CALCO 2007: 2nd Conference on Algebra and Coalgebra in Computer Science, Bergen, Norway, 20–24 August 2007 (PC member) FSEN 2007: Fundamentals of Software Engineering, Tehran, Iran, 20–21 April 2007 (keynote speaker and tutorial presenter) IFIP WG 1.3: Working Group Meeting on Foundations of System Speciﬁcation, Braga, Portugal, 23–24 March 2007 (member) BCTCS 2007: 23rd British Colloquium for Theoretical Computer Science, Oxford, 2–5 April 2007 (speaker) 2006 # TFM 2006: Teaching Formal Methods: Practice and Experience, BCS-FACS Christmas Meeting, London, 15 December 2006 (speaker) IFIP WG2.2: 40th Anniversary Meeting of Working Group on Formal Description of Programming Concepts, Udine, Italy, 11–13 September 2006 (speaker) Symposium for Gordon Plotkin, Edinburgh, 7–8 September 2006 (invited participant) MFCS 2006: 31st International Symposium on Mathematical Foundations of Computer Science, High Tatras, Slovakia, 28 August – 1 September 2006 (PC member) MMOSS: Seminar on Methods for Modelling Software Systems, Dagstuhl, Germany, 27 August – 1 September 2006 (speaker) SOS 2006: Third Workshop on Structural Operational Semantics, Bonn, Germany, 26 August 2006 (co-organizer) AMAST’06: 11th International Conference on Algebraic Methodology and Software Technology, Kuressaare, Estonia, 5–8 July 2006 (PC member) PSI’06: Sixth International Andrei Ershov Memorial Conference on Perspectives of System Informatics, Novosibirsk, Akademgorodok, Russia, 27–30 June 2006 (PC member) WADT’06: 18th International Workshop on Algebraic Development Techniques, Chateau Floreal La Roche en Ardenne, Belgium, 1–3 June 2006 (SC and PC member) SBLP 2006: Tenth Brazilian Symposium on Programming Languages, Itatiaia, Brazil, 15–17 May 2006 (programme committee member) BCTCS 2006: 22nd British Colloquium for Theoretical Computer Science, Swansea, 4–7 April 2006 (invited speaker, sponsored by BCS-FACS) BCS-FACS Evening Seminar, London, 3 March 2006 (speaker) 2005 # IFIP WG 1.3: Working Group Meeting on Foundations of System Speciﬁcation, Swansea, 7–8 September 2005 (local organizer) CALCO 2005: First Conference on Algebra and Coalgebra in Computer Science, Swansea, 3–6 September 2005 (SC and PC member) CALCO-jnr 2005: CALCO Young Researchers Workshop, Swansea, 2 September 2005 (organizing committee member) ","date":null,"permalink":"/meetings/","section":"Home","summary":"","title":"Meetings"},{"content":"","date":null,"permalink":"/papers/","section":"Papers","summary":"","title":"Papers"},{"content":" Lists of previous publications Google Scholar • DBLP • ORCID • Researchr • ResearchGate • AMiner • Scopus Latest publications # Lightweight Agda Formalization of Denotational Semantics in TYPES 2025: Proceedings of the 31st International Conference on Types for Proofs and Programs\nTowards Verification of a Denotational Semantics of Inheritance in JENSFEST 2024: Proceedings of the Workshop Dedicated to Jens Palsberg on the Occasion of His 60th Birthday\nSLE \u0026lsquo;24: Proceedings of the 17th ACM SIGPLAN International Conference on Software Language Engineering (editor, with Ralf Lämmel and Juliana Alves Pereira)\nOnline Name-Based Navigation for Software Meta-languages in Proc. 16th ACM SIGPLAN Int. Conf. on Software Language Engineering (SLE \u0026lsquo;23)\nUsing Spoofax to Support Online Code Navigation in Eelco Visser Commemorative Symposium (EVCS 2023)\nEelco Visser Commemorative Symposium (EVCS 2023) Dagstuhl OASIcs volume 109, 2023\n(editor, with Ralf Lämmel and Friedrich Steimann)\nIntrinsically-typed Definitional Interpreters à la Carte Proc. ACM Program. Lang. 6(OOPSLA2): 1903-1932, 2022\n(with Cas van der Rest, Casper Bach Poulsen, Arjen Rouvoet, and Eelco Visser)\nHighlights # Fundamental Constructs in Programming Languages\nin ISoLA 2021, (preprint)\nSoftware Meta-language Engineering and CBS\nJournal of Computer Languages (2019)\nExecutable Component-Based Semantics\nwith L. Thomas van Binsbergen and Neil Sculthorpe\nJLAMP (2019), (preprint)\nImplicit Propagation in Structural Operational Semantics with Mark J. New\nElectronic Notes in Theoretical Computer Science (2009)\nSemantics and Algebraic Specification\nFestschrift (2009)\nedited by Jens Palsberg\nwith contributions by many international colleagues and former students SIS – Semantics Implementation System\nReference Manual (1979), Tested Examples (1979), both copied from the Semantics Library of Cliff B Jones Case Study (1978) by Veronique Donzeau-Gouge, Bernard Lang, and Gilles Kahn, IRIA-RR-330\n","date":null,"permalink":"/publications/","section":"Home","summary":"","title":"Research Publications"}]